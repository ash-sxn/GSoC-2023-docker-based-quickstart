name: Docker Compose Test

on:
  push:
    branches:
      - '*'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up and start Docker Compose
        run:
          cd ./04_sidekick && docker compose up --build --remove-orphans --force-recreate -d

      - name: Wait for services to start
        run: |
          # The timeout command is used to set a maximum execution time of 60 seconds. The loop inside the bash -c
          # command checks if the curl request succeeds (i.e., returns a non-empty response) using the exit code.
          # If it fails, it sleeps for 1 second and repeats the curl request until it succeeds or the timeout is reached.
          # If the curl request is successful within the timeout, the "Jenkins has started" message is displayed.
          # Otherwise, if the timeout is reached, the script exits with an exit code of 1.
          timeout 60 bash -c 'until curl -s http://localhost:8080 > /dev/null; do sleep 1; done' && echo "Jenkins has started" || exit 1

      - name: Wait for services to be ready
        run: |     
          # After the curl request, the output is piped to the awk command. It is used to search for the message
          # "Please wait while Jenkins is getting ready to work" in the curl output.
          # If the message is found, awk exits with a non-zero status (1), and the loop continues.
          # If the message is not found, the loop exits, and the "Jenkins is running" message is displayed.
          timeout 60 bash -c 'until curl -s http://localhost:8080 | awk "/Please wait while Jenkins is getting ready to work/{print \"Jenkins is initializing\"; exit 1}"; do sleep 5; done' && echo "Jenkins is running" || exit 1



      - name: Run curl command to test the stack
        run: |
          # To check the version of Jenkins, load the top page or any .../api/* page and check for the X-Jenkins response header. This contains the version number of Jenkins, like "1.404" This is also a good way to check if an URL is a Jenkins URL.
          curl -s -I -k http://admin:butler@localhost:8080 | grep -i '^X-Jenkins:' | awk '{print $2}'
          # Before laucnhing a job, we need to create a token for the admin user
          CRUMB=$(curl -s -k http://admin:admin@localhost:8080/crumbIssuer/api/xml?xpath=concat\(//crumbRequestField,%22:%22,//crumb\) -c cookies.txt)
          TOKEN=curl -s -k 'http://admin:admin@localhost:8080/user/admin/descriptorByName/jenkins.security.ApiTokenProperty/generateNewToken' --data 'newTokenName=kb-token' -b cookies.txt -H $CRUMB | jq -r '.data.tokenValue'
          # Let's launch a job. The token has been generated in the Jenkins UI (admin, settings, and so on)
          curl -k -X POST http://admin:$TOKEN@localhost:8080/job/simple-java-maven-app/build

      - name: Stop and remove Docker Compose services
        run: cd ./04_sidekick && docker compose down --volumes